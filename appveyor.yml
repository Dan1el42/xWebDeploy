#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.2.{build}.0
install:
  - cinst -y pester
  - git clone https://github.com/PowerShell/DscResource.Tests
  - ps: Push-Location
  - cd DscResource.Tests
  - ps: Import-Module .\TestHelper.psm1 -force
  - ps: Pop-Location

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
  - ps: |
      $testResultsFile = ".\TestsResults.xml"
      $exception = $null
      try
      {
          $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
          (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
      }
      catch
      {
          $_ | select *
          throw $_
      }

      if ($res.FailedCount -gt 0)
      {
          throw "$($res.FailedCount) tests failed."
      }

      if ($Error.Count -gt 0)
      {
         Write-Warning  "Errors were detected in the error stream:"
        $errors = $error.ToArray()
        foreach ($err in $errors)
        {
            if ($err -is [System.Management.Automation.ErrorRecord])
            {
                Write-Warning -Message $err.CategoryInfo.ToString()
                Write-Warning -Message $err.FullyQualifiedErrorId
                Write-Warning -Message $err.ScriptStackTrace.ToString()
                if ($null -ne $err.Exception)
                {
                    $err = $err.Exception
                }
                else
                {
                    continue
                }
            }
            elseif ($err -is [System.Management.Automation.Runspaces.RemotingErrorRecord])
            {
                Write-Warning -Message $err.ToString()
                Write-Warning -Message $err.CategoryInfo.ToString()
                Write-Warning -Message $err.CategoryInfo.ToString()
                if ($null -ne $err.Exception)
                {
                    $err = $err.Exception
                }
                else
                {
                    continue
                }
            }

            if ($err -is [System.Exception])
            {
                Write-Warning -Message $err.StackTrace.ToString()
                Write-Warning -Message $err.Message
            }
            else
            {
                Write-Warning -Message $err.ToString
            }
        }
        throw "Tests failed with errors in the output stream"
      }

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment
deploy_script:
  - ps: |
      # Creating project artifact
      $stagingDirectory = (Resolve-Path ..).Path
      $manifest = Join-Path $pwd "xWebDeploy.psd1"
      (Get-Content $manifest -Raw).Replace("1.2.0.0", $env:APPVEYOR_BUILD_VERSION) | Out-File $manifest
      $zipFilePath = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
      Add-Type -assemblyname System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFilePath)

      # Creating NuGet package artifact
      New-Nuspec -packageName $env:APPVEYOR_PROJECT_NAME -version $env:APPVEYOR_BUILD_VERSION -author "Microsoft" -owners "Microsoft" -licenseUrl "https://github.com/PowerShell/DscResources/blob/master/LICENSE" -projectUrl "https://github.com/$($env:APPVEYOR_REPO_NAME)" -packageDescription $env:APPVEYOR_PROJECT_NAME -tags "DesiredStateConfiguration DSC DSCResourceKit" -destinationPath .
      nuget pack ".\$($env:APPVEYOR_PROJECT_NAME).nuspec" -outputdirectory .
      $nuGetPackageName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + ".nupkg"
      $nuGetPackagePath = (Get-ChildItem $nuGetPackageName).FullName

      @(
          # You can add other artifacts here
          $zipFilePath,
          $nuGetPackagePath
      ) | % {
          Write-Host "Pushing package $_ as Appveyor artifact"
          Push-AppveyorArtifact $_
        }




